		           +--------------------------+
				   |         CIS 520          |
		           | PROJECT 2: USER PROGRAMS |
		           |     DESIGN DOCUMENT      |
		           +--------------------------+

---- GROUP ----

>> Fill in the names of your group members.

Karijanna Miller
Danniel Christensen
Kelcie Dinkle

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

	N/A

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

	https://github.com/ChristianJHughes/pintos-project2
	https://cs.jhu.edu/~huang/cs318/fall17/project/project2.html
	http://www.scs.stanford.edu/10wi-cs140/labs/10wi-proj2.pdf

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

typedef struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    struct list_elem allelem;           /* List element for all threads list. */
    int64_t wakeup_time;

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
    bool success;                       /* Detect user thread's success */
    struct list file_descriptors;	/* A list of file_descriptors related to the thread */
    struct file * exec_file; 		/* the file the process is executing */
    struct list child_list;		/* List of childeren processes */
    struct process_control * pc;	/* process control for the thread */
#endif
    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  }thread;

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

	All of the argument were organized by using a combination of a temporary
	char array. The setup_stack was modified to take in argv and argc to separate
	command name and command argumat. The strtok_r was used 
	to put each command line argument into argv. 
	The memcpy and memset were used to readjust esp pointers based on the size
	of the objects. This also helps allocating space on the stack. 

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

	The Pintos documentation defines strtok() utilizes global data 
	which is unsafe to use in a kernel environment such as Pintos. 
	Static buffer is used in strtok() during parsing which is also
	unsafe in a kernal (threaded) environment. Static buffer creates
	a high probability to corrupt since it operates on a single static
	buffer if multiple threads were accessing strtok() simultaneously. 

>> A4: In Pintos, the kernel separates commands into an executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
	
	1. If there was a thread with high priority trying to run, the kernel 
	has the ability to pause the argument parsing that's occuring within 
	the shell. Therefore, when new threads are created, priority scheudling will not 
	be affected. 
	2. The shell is a system application which simplifies the kernel code.
	Names and arguments are separated externally from the kernel which helps 
	with preventing bugs. 

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

typedef struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    struct list_elem allelem;           /* List element for all threads list. */
    int64_t wakeup_time;

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
    bool success;                       /* Detect user thread's success */
    struct list file_descriptors;	/* A list of file_descriptors related to the thread */
    struct file * exec_file; 		/* the file the process is executing */
    struct list child_list;		/* List of childeren processes */
    struct process_control * pc;	/* process control for the thread */
#endif
    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  }thread;

tid_t process_execute (syscall.c) - Made public to be able to be used in syscall.c
int process_wait (syscall.c) - Made public to be able to be used in syscall.c
void process_exit (syscall.c) - Made public to be able to be used in syscall.c
void process_activate (syscall.c) - Made public to be able to be used in syscall.c
struct lock lock_file (syscall.c) - Lock is in charge of ensuring that only one process 
can access the file system at one time.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

	The file descriptors are unique within a single process only.
	When a file gets closed its file descriptor is freed, and it can be reused by the system
	later for another file. When a file is opened by calling the open system call, it gets added to
	current process's list of open files and assigned a unique file descriptor. 
	If the same file is opened and kept open repeatedly, each time time it gets a new file descriptor.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.
	
	The reading and writing user data from the kernel is processed using 
	syscall_read and syscall_write. The system calls expect a fd (file descriptor), 
	pointer to a buffer, and a parameter specifying size of the buffer.
	The methods within the syscall_read and syscall_write validated pointers then
	dereference the pointers as needed. 
	
>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

	In a naive implementation, you could call it for every byte to ensure
	that it is on an allocated page. However, since we know that a page is
	of size 4096, the data must exist on at most two pages. Therefore,
	we would only need to make the call twice if the data is not page
	aligned or once if the address is aligned to the beginning of a page
	to make sure that all the data are on valid pages. For 2 bytes the case is the same as the 
	optimized case above. The naive approach would not make more than 2 calls.
	
>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

	The process_wait has the implementation of the wait system call. 
	A list of children is given to every thread. When process_wait is 
	called, a child is removed from the list to prevent multiple children
	waiting at a time. The parent has a semaphore which acts as a condition
	variable. The semaphore is used to wait on the child that is asleep till
	it wakes up. The parent continues its execution when the child is awake.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

	The semaphore that was added makes sure the child completes
	its process before the exec system is called. 
	The process_control struct keeps track of the childs process
	and loading status. The struct also helps with returning the
	correct value of the child to the parent it belongs to. 

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

	The children are complete through the alive_sema semaphore, and 
	the parent is waiting during the process. There is a list of 
	children that the parent keeps. If the parent calls the 
	wait(child) after the child exits, the parent will not wait
	for the child since it would already be removed from the 
	parent's list. If the wait(child) is called before the child exists,
	then the parent will wait until the child has called the sema_up
	while it exists. If the parent is destroyed and does not wait for 
	the child, then the child will not be able to alert the parent
	when it is done executing. 

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

	The get_user method checks the potencial space for the address in the 
	user's memory space. This method worked along with pagedir_get_page
	in order to validate pointers which also validated the pages that
	were being used. 

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

	The file_desc struct allows for a simple way to find the file
	descriptor by mapping the file descriptor to its provided file
	number. The disadvantage would be that this method might require
	extra space if there are too many file numbers. 

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

	The mapping did not change. 

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

It was definitely harder than the last project. Especailly with the cslinux not working and having
to transfer work to Beocat. 

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Yes, it was helpful to work on a specific part rather than all the parts with everyone in the team.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

I think more information about the testing process would be helpful. There was a lot of information about
parsing and structure which to me seemed a little redundent. I definitely would've appreciated more information
about how to execute the system calls during testing. 

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

N/A

>> Any other comments?

N/A
