		           +---------------------------+
       	           |         CIS 520           |
		           | PROJECT 3: Virtual Memory |
		           |     DESIGN DOCUMENT       |
		           +---------------------------+

---- GROUP ----

>> Fill in the names of your group members.

Danniel Christensen
Karijuanna Miller

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.
https://static1.squarespace.com/static/5b18aa0955b02c1de94e4412/t/5b85fad2f950b7b16b7a2ed6/1535507195196/Pintos+Guide

			PAGE TABLE MANAGEMENT
			=====================

---- ALGORITHMS ----

>> A1: In a few paragraphs, describe the existing code for locating the
>> frame, if any, that contains the data of a given page.

The page struct was used to locate the frame per page. This struct also had the sector, 
the users virtual address, and whether the frame was private or note. 

The do_page_in method will allocate the frame for the page as well as copy data into the frame. 

---- SYNCHRONIZATION ----

>> A2: When two user processes both need a new frame at the same time,
>> how are races avoided?

There is a lock called scan_lock that limits it to one page at a time can look for a page. 
This can be seen in the try_frame_alloc_and_lock method. 

		       PAGING TO AND FROM DISK
		       =======================

---- ALGORITHMS ----

>> B1: When a frame is required but none is free, some frame must be
>> evicted.  Describe the algorithm used to choose a frame to evict.

The evicting algorithm was already implemented in the try_frame_alloc_and_lock. 
If we cannot acquire the lock for the frame, then it is in use, so we continue to look for a frame.
If we come across a frame that does not have a page, we immediatly give that frame to the page. 
If page_accessed_recently returns false, we will also continue to look for a frame. 
Finally we will check page_out to determine if this page should be evicted. 

>> B2: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

We have to check the pages addresss and the user_esp to determine if they are within the correct ranges to be able to allocate a page.
The page's address must be greater than phys_base-stack_max and the user's esp must be within 32 bits of the address to account for 
commands that manage the stack. 

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

After the professor released the files, it was all pretty self explanatory.
Leaving some of the global variables for us to define and maybe having us 
dome some of the work that ended overlapping (such as block_write and
block_read would have made this much more difficult). 

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Working on the page.c file allowed a deeper insight than working on the syscall.c file. 

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

I just think you need to tone down the files that you gave us to use. 

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

Not really.

>> Any other comments?

N/A
